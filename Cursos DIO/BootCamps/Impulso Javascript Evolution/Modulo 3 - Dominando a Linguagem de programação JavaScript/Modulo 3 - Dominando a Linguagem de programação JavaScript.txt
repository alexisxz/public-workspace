#############################################################
Introdução ao JavaScript
#############################################################
1. O que é JavaScript
1.2 História, Evolução e Aplicações
- Interpretada - rodando em tempo real
- Baseada em Protótipos
- Multiparadigma
- Comumente utilizada em Aplicações web client-side
- Segue o padrão ECMAScript - Um padrão para varias linguagens, um conjunto de normas que vai dizer quais funcionalidades é lançada naquelas linguagens

Aplicações:
1. web
2. Mobile
3. Smartwatches
4. Games
5. Internet of Things
6. APIs
----------------------------------------------------------------
4. JavaScript em uma página da web
4.3 DOM (Document Object Model) - Estrutura dos elementos dentro da janela (As vezes chamados de arvore DOM)
-----------------------------------------------------------------

6. Mercado de Trabalho
6.1 Frameworks e bibliotecas
1. VueJS
2. React
3. Angular
4. JQuery

6.2 Mercado

#############################################################
Sintaxe Básica em JavaScript
#############################################################
2. O que danado é JavaScript?
2.1 O que é?
Uma linguagem de alto nível ( que é mais entendido pelas pessoas) \ baixo nível é de baixo nível (Entendido mais pelas máquinas)
--------------------------------------------------------------

3. Entendendo variáveis e seus valores
3.2 Entendendo variáveis e seus valores
1. Tipagem? Regra de uso de dados, quanto mais forte for a tipagem, mais obrigatório é a declaração do tipo de dado - JavaScript é uma tipagem fraca

2. O que são variáveis? São dados que variam, que se declara de 3 formas:
var = escopo global e local, pode ter seu valor alterado.
let = escopo local de bloco, pode ter seu valor alterado.
const = escopo local de bloco, somente leitura, valor inalterável

3. Escopo:
global = quando a variável é declarada fora de qualquer bloco, sua visibilidade fica disponível em todo o código
local = quando a variável é declarada dentro de um bloco, sua visibilidade pode ficar disponível ou não.

. Atribuição - dada pelo sinal "="
. Igual (comparando o valor) - dada pelo sinal "=="
. comparação idêntica (comparando valor e tipo) - dada pelo sinal "==="

4. Operadores lógicos
1. && - "e" - considera que todos os valores sejam true;
2. || - "ou" - considera que qualquer valor seja true;
3. ! - "não" - inverte o valor de true para false ou vice-versa;
----------------------------------------------------------------------

5. Vetores e Objetos
1. Vetores ou arrays
. arrays = lista, ou matriz de variáveis, onde cada variável possui um índice = let array = [st1, st2, false, true, 2];

2. Manipulando arrays
forEach() - itera um array;
push() = add item no final do array;
pop() = remove item no final do array;
shift() = remove item no início do array;
unshift() = add item no início do array;
indexOf() = retorna o índice de um valor;
splice() = remove ou substitui um item pelo índice;
slice() = retorna uma parte de um array já existente

3. Objetos - Dados que possuem propriedades e valores que definem suas características. deve ser declarado entre chaves "{}"
var xicara = {cor:'azul', tamanha:'p', funcao: tomarCafe()}
-----------------------------------------------------------------------

5. Estruturas condicionais
5.1 Estruturas - Instruções para realizar uma determinada tarefa a partir de uma condição

1. Estrutura de decisão - if

2. if ternário - [condição] ? [instrução1]:[instrução2];

3. switch/case - funciona como uma estrutura condicional também

4. Laços de repetição: repetição até atingir determinada condição
for
for/in
for/of
while
do/while
-------------------------------------------------------------------------

6. Funções e suas particularidades
O que é função? são blocos de comandos e instruções para a execução de determinadas tarefas

Como declarar?
() - Indica que é um objeto do tipo function;
{} - Indica que é um bloco de instrução;

1. com parâmetros = function nomeDaFuncao(paramentro){${instrucao};}

6.1 tipos de Funções
1. declarativas = function nomeDaFuncao (){${instrucao};}
2 expressões (variaveis que recebem uma função) = var funcao = function nomeDaFuncao(){${instrucao};}
3. arrow (variaveis que recebem uma função anonima)= var funcao = () =>{${instrucao};}

#############################################################
Sintaxe e Operadores
#############################################################
1. Operadores

Tipos de Operadores (principais):
1. Atribuição (=, +=, *=, /=, %=)
2. Aritimética (+, -, *, **, /, %, ++, --)
3. Comparação (==, ===, !=, !==, >, <, >=, <=)
4. Lógica (&&, ||, !)
5. Condicional: if ternário
    condition ? expressionTrue : expressionFalse

#############################################################
Variáveis e Tipos
#############################################################
1. Atribuindo valores
1.2 Variavéis
usado em constante - Upper Case Snake Case = SOME_AWESOME_VAR
usado em var e funçoes - Camel case = simVariavel

var e let:
let - the scope is inside the blocks (if, funcition, etc..)
var - the scope is global
----------------------------------------------------------------

1.3 constante
Declarada em SNAKE_UPPER_CASE
Escopo de bloco
Não faz hoisting
------------------------------------------------------------------

1.4 let, var e const

            var                 const           let
escopo      global ou local     bloco           bloco
redeclarar  sim                 não             não
reatribuir  sim                 não             sim
hoisting    sim                 não             não
--------------------------------------------------------------------

2. Tipos
2.1 Estruturas de dados (existente em todas linguagens):
tipagem dinâmica (pode modificar o valor e o tipo)

Data types:
Primitive types: numbers, strings, boolean, null, undefined (não tem instruções dentro)
composite/non-primite types: objects, arrays (tem instruções)
---------------------------------------------------------------------

2.6 Objetos
let person = {
    name: 'John',
    age: 20,
}

person.surname = 'Deep';
result = person = {
    name: 'John',
    age: 20,
    surname: 'Deep'
}

let mom = nameMom
person[mom] = 'Marta'
result = person = {
    name: 'John',
    age: 20,
    surname: 'Deep',
    nameMom = 'Marta',
}
------------------------------------------------------------------------

2.7 empty, null e undefined
empty = você declara um tipo sem valor
null = você declara um tipo com valor nulo (sem importancia)
undefined = você não declara nem tipo nem valor
-------------------------------------------------------------------------

#############################################################
Funções
#############################################################
1.2 Estrutura e função anônima
funtion nome(parametros) {
    instruções
    return (pode ser usado ou não);
}

.Função anônima - funções que representam expressões | criar variaveis com funções
const soma = function (a,b) {
    return a + b;
}

.função autoinvocável e callback - IIFE (immediatelly invoked function expression) - uma função anônima entre parênteses, seguida por outro par de parênteses, que representa sua chamada.
(
    function() {
        let name = "Digita aqui"
        return name;
    }
)();

.Callbacks - uma função passado como argumento para outra
const calc = function(operacao, num1, num2) {
    return operacao(num1, num2);
}
const soma = function(num1, num2) {
    return num1 + num2;
}
const sub = function(num1, num2) {
    return num1 - num2;
}

const resultSoma = calc(soma, 1, 2);
const resultSub = calc(sub, 1,2);
--------------------------------------------------------------------

2. parâmetros
2.2 Arrays e Objetos
1. spread: é os "..." ele dividi os valores para os paramêtros
function sum (x, y, z) {
    return x + y + z;
}
const numbers = [1, 2, 3];
console.log(sum(...numbers));
----------------------------------------------------------------------

3.Loops
3.1 if/else e switch
//switch
funtion getAnimal(id) {
    switch(id) {
        case 1:
            return "cão";
        case 2:
            return: "gato";
        case 3:
            return: "pássaro";
        default:
            return: "peixe";
    }
}
getAnimal(1) // cão
getAnimal(4) // peixe
getAnimal('leão') // peixe
-------------------------------------------------------------------------

3.2 For e While
1. For
// for
function multiplicaPorDois (arr) {
    let multiplicados = [];

    for(let i = 0; i < arr.length; i++) {
        multiplicados.push(arr[i] * 2);
    }

    return multiplicados;
}

const meuNumeros = [2, 33, 456, 356, 40];
multiplicaPorDois(meuNumeros);

// for ir - utilizado para objetos
function forInExemplo(obj) {
    for (prop in obj) {
        console.log(prop)
    }
}
const meuObjeto = {
    nome: "Jão",
    idade: "20",
    cidade: "Salvador"
}
forInExemplo(meuObjeto);

// for of - loop entre interáveis (arrays, strings)
function logLetras(palavra) {
    for(letra of palavra) {
        console.log(letra)
    }
}
const palavra = "abacaxi";
logLetras(palavras)

2. While
function exemploWhile () {
    let num = 0

    while (num <=5) {
        console.log(num);
        num++;
    }
}
exemploWhile()

//Do while - ele executa pelo menos 1 vez, mesmo se condição for funcionalidades
function exemploDoWhile() {
    let num = 6
    do {
        console.log(num);
        num++;
    } while(num <= 5)
}

exemploDoWhile()
-----------------------------------------------------------------------

4. This
4.1 O que é?
Uma referência de contexto.

const pessoa = {
    firstName: "André",
    lastName : "Soares",
    id: 1,
    fullName: function() {
        return this.firstName + " " + this.lastName;
    },
}
pessoa.fullName(); // André Soares

This: o que é?
contexto                    Referência
Em um objeto(método)        Próprio objeto dono do método
Sozinha                     Objeto global (em navegadores, window)
Função                      Objeto global
Evento                      Elemento que recebeu o evento

4.2 Manipulando o seu valor
1. Call
const pessoa = {
    nome: 'Miguel',
};
const animal = {
    nome:'Murphy',
};
function getSomething() {
    console.log(this.nome);
}

getSomething.call(pessoa); // Miguel
getSomething.call(animal); // Murphy

aula completa: https://web.dio.me/course/funcoes/learning/8b713d82-f56e-4cde-b10d-8552a0eac233?back=/track/impulso-javascript-evolution&tab=undefined&moduleId=undefined

2.Apply
const pessoa = {
    nome: 'Miguel',
};
const animal = {
    nome:'Murphy',
};
function getSomething() {
    console.log(this.nome);
}
getSomething.apply(pessoa); // Miguel
getSomething.apply(animal); // Murphy

3. Bind - vai clonar a estrutura e passar o valor do objeto como parametro
---------------------------------------------------------------------

5. Arrow functions
5.1 Sintaxe e outras restrições
de:
const helloWorld = function() {
    return "hello world";
}
melhorado:
const hello = () => {
    return "Hello World";
}
para:
const helloWorld = () => "Hello World";

1. Sintaxe
const soma = (a, b) => a + b;

const soma = a => a;

. RESTRIÇÕES:
* NÃO FAZ HOISTING!!!!
* THIS, SEMPRE SERÁ DO OBJETO GLOBA, MÉTODOS PARA MODIFICAR SEU VALOR NÃO IRÃO FUNCIONAR
* NÃO EXISTE O OBJETO "ARGUMENTS"
* O CONSTRUTUR (EX: neu MeuObjeto()) TAMBÉM NÃO PODE SER UTILIZADO.
-----------------------------------------------------------------------

#############################################################
Debugging e Erroe Handling
#############################################################
1. Tipos de erros
1.2 ECMAScript Error e DOMException
1. ECMAScript
Erros que ocorrem em tempo de execução

2. DOMException (error do DOM (document object model));
Relacionado ao código na página da web
---------------------------------------------------------------------

2. Tratando erros
2.1 Throw, Try/Catch e Finally
1. Throw - Ele vai retornar o erro como erro e mostrará todas as propriedades dos erros
function verificar Palindromo (string) {
    if (!string) throw(ao inves de return) "String inválida"; // Uncaught: String inválida
}

2. Try...catch - verificar se tem algum erro e pega-lo e trata-lo como quiser
function verificarPalindromo(string) {
    if (!string) throw "String inválida";
    return string === string.split(''),reverse().join('');
}
function tryCatchExemplo(string) {
    try {
        verificarPalindromo(string)
    }
    catch(e) {
        console.log(e) ou throw e; (para colocar melhores estatisticas)
    }
}

tryCatchExemplo('');

3. Finally - irá executar alguma ação depois do erro
function verificarPalindromo(string) {
    if (!string) throw "String inválida";
    return string === string.split(''),reverse().join('');
}
function tryCatchExemplo(string) {
    try {
        verificarPalindromo(string);
    }
    catch(e) {
        throw e;
    }
    finally {
        console.log('A string enviada foi: ' + string);
    }
}
-------------------------------------------------------------------------

3. Criando erros
3.1 O objeto error - 
new Error(message, fileName, lineNumber)
const MeuErro = new Error('Mensagem Inválida');
throw MeuErro;
-------------------------------------------------------------------------

#############################################################
Manipulando a D.O.M com javaScript
#############################################################
1. Entendendo o D.O.M.
1.2 O que é?
Document Object Model - O DOM HTML é um padrão de como acessar e modificar os elementos HTML de uma página.

1.3 Diferença entre BOM (Browser Object Model) - Tudo o que está dentro do objeto window, o DOM está dentro do BOM
-------------------------------------------------------------------------

2. Selecionando elementos
1. Estrutura:
 - tag <body>
 - id - um atributo, único para o elemento
 - classe - identificar não único

const meuElemento = document.getElementById("meu-elemento");
meuElemento.classList.add("novo-estilo");
meuElemento.classList.remove("classe");
meuElemento.classList.toggle("dark-mode");
meuElemento.style.color = "blue";
 ------------------------------------------------------------------------

4. Eventos
mouseover, mouseout - entrando e saindo no elemento
click, dbclik - eventos de clique
Change, load - eventos de atualização

1. acionando eventos
const botao = document.getElementById("meuBotao")
botao.AddEventListener("click", outraFuncao)

or on HTML

<h1 onclick="mudaText(this)">Clique aqui! </h1>
<script>
    function mudaTexto(id) {
        id.innerHTML = "Mudei!";
    }
</script>
------------------------------------------------------------------------

#############################################################
Javascript Assíncrono
#############################################################
1. Assincronicidade
1.2 Definição, Promises e Async/Await

1. Definição:
Assíncrono: "Que não ocorre ou não se efetiva ao mesmo tempo"
O Javascrita roda de maneira síncrona.

2. Promises:
Objeto de processamento Assíncrono
.Estados: Pending, Fulfilled, Rejected
const myPromise = new Promise((resolve, reject) =>{
    window.setTimeout(()) => {
        resolve('Resolvida');
    }, 2000);
});

Async / await
Funções assíncronas precisam dessas duas palavras chave.
-----------------------------------------------------------------------

2. Consumindo APIs
2.1 O que são APIs e Fetch
1. APIs (Application programming interface) - Uma forma de intermediar os resultados de back-end com o que é apresentado no front-end
Expressão popular: São as URLS que vão trazer dados

2. Formatos:
1. JSON: JavaScript Object Notation
2. fetch:
fetch(url, option)
    .then(response => response.json())
    .then(json => console.log(json))
// retorna uma Promise
Operações no banco (POST, GET, PUT, DELETE, etc):
fetch('htts...', {
    method: 'GET',
    cache: 'no-cache',
})
    .then(response => response.json())
    .then(json => console.log(json))
------------------------------------------------------------------------

#############################################################
Javascript Assíncrono
#############################################################
1. Paradigmas e Pilares
1.2 Paradigmas
Dois paradigmas: Imperative(procedural, object oriented, parallel processing) e declarative (logic, functional, dataflow, database)

2.2 Pilares:
Abstração - Cada vez tornar o objeto mais simples, generalizando
Herança - O objeto filho herda propriedades e métodos do objeto pai
Encapsulamento - Cada classe tem propriedades e métodos independentes do restante do código.
Polimorfismo - Objeto herdar a mesma classe pai, mas se comportarem de forma diferente quando invocamos seus métodos
-------------------------------------------------------------------------

2. Orientação a Objetos em JavaScript (OOJS)
2.1 Protótiops e Classes
1. Protótipos: é o esqueleto de todos os objetos, é o que está no topo da cadeia.

2. Classes: uma sintaxe feita para facilitar a escrita (sintaxe sugar))
class Meal {
    constructor (food) {
        this.food = food
    }

    eat() {
        return '♥'
    }
}
OBS. Javascript não possui classes nativamente. Todas as classes são objetos e a herança se dá por protótipos.
class Animal {
    constructor(type = 'animal') {
        this.type = type
    }
    get type() {
        return this._type
    }
    set type(val) {
        this._type = val.toUpperCase()
    }
    makeSound() {
        console.log('Making animal sound')
    }
}
let a = new Aniaml()
console.log(a.type) //ANIMAL

class Cat extends Animal {
    constructor(){
        super('car')
    }

    makeSound() {
        super.makeSound()
        console.log('Meow')
    }
}
let b= new Cat()
console.log(b.type) // CAT
-------------------------------------------------------------------------

#############################################################
Introdução ao TypeScript: Explorando Classes, Tipos e Interfaces
#############################################################
1. criando o arquivo index.ts e executando o comando parcel
Passo a passo:
1. Na pasta inicializar o comando: npm init
2. Na pasta dar o comando: npm i parcel-bundler
3. criar a index.html - 


// types
// interfaces

interface IAnimal {
    nome: string;
    tipo: 'terreste' | 'aquático';
    domestico: boolean;
}

interface IFelino extends IAnimal {
    visaoNoturna: boolean;
}

interface ICanino extends IAnimal {
    porte: 'pequeno' | 'médio' | 'grande';
}

type IDomestico = IFelino | ICanino;

const animal: IDomestico = {
    domestico: true,
    nome: 'cachorro',
    porte: 'médio',
    tipo: 'terreste',
}