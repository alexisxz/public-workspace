#############################################################
Conhecendo os Principais Protocolos de Comunicação da Internet
#############################################################
2. Protocolo de comunicação Web http
2.1 Como funciona o protocolo HTTP?
HyperText Transfer Protocol (HTTP)
Protocolo de comunicação
1. Browser - Implementa o cliente HTTP
2. Servidor - host objetos web

1. Cliente - Mensagens: Request HTTP - Objetos Web
2. Servidor - Mensagens: Response HTTP - Protocolo TCP

HTTP: Aplicação
1. Protocolo HTTP com GET (Receber do servidor):
1.1 HTTP Request:
Get: https:www.amazon.com.br
Host: amazon.com
Connection: close
User-agent: Mozilla/5.0
1.2 HTTP Response:
HTTP/1.1 200 OK
Connection: close
Date: Tue, 09 Aug 2011 15:44:04 GMT
Server: Apache/2.2.3 (CentOS)
Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT
Content-Lenght: 6821
content-type: text/html
(data... amazon initial page)

2. Procolo HTTP com POST (Enviar para o servidor):
2.1 HTTP Request:
Post: https:www.amazon.com.br/cadastro
Host: amazon.com
Connection: close
User-agent: Mozilla/5.0
...
Data: nome, data de nascimento, contato
...
2.2 HTTP Response:
HTTP/1.1 200 OK
Connection: close
Date: Tue, 09 Aug 2011 15:44:04 GMT
Server: Apache/2.2.3 (CentOS)
Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT
Content-Lenght: 6821
content-type: text/html
(data... Update Succeed)

3. Formatos de estruturação de dados: XML ou JSON - HTTP Entity Body
Armazenamento - Transmissão - Reconstrução
3.1 Request Header:
Content-type:application/json
Accept: application/json
3.2 Extensible Markup Language (XML) - Objetivo: Serialization, Comunicação, Metadados
3.3 javascript Object Notation (JSON) - Características: Lightweight, independente de ling., simples
3.4 Comun entre os dois: Auto-descritivos, Hierárquicos, Independentes de linguagem de prog., vasta Utilização

4. Por qual optar?
Depende da tecnologia, complexidade, e os prós e contras para cada um

TCT: APRESENTAÇÃO
1. TCT (Transmission Control Protocol)
TCP não persistente - A conexão é estabelecidade, recebe as informações e é fechada após receber a resposta.
TCT persistente - A conexão não fecha, pois não recebe a resposta, ou as trocas são feitas simultâneas.
------------------------------------------------------------------------

2.2 Mensagens HTTP - Request & Response
REQUEST LINE
Get:/somedir/page.html(Método HTTP)HTTP/1.1(Versão)
HEADER LINE
Host: www.someschool.edu(URL)
Connection: close (Tipo de conexão - Conexão não persistente)
User-agent: Mozilla/5.0 (Agente)
Accept-language: fr (Pref. do cliente à linguagem)

Métodos:
GET - Solicita um recurso do servidor
HEAD - Get sem corpo de resposta
POST - Submete uma entidade a um recurso
PUT - Substituição de recursos pelos dados da requisição
DELETE - Remoção de um recurso
TRACE - Chamada de loop-back a um determinado recurso
OPTION - Opções de comunicação com recurso
CONNECT - Tunelamento identificado pelo recurso
PATCH - Modificação parcial

Metodos Seguros:
GET, HEAD, OPTION = READ-ONLY

RESPONSE
STATUS LINE
HTTP/1.1 200 OK
HEADER LINES
Connection: close
Date: Tue, 09 Aug 2011 15:44:04 GMT
Server: Apache/2.2.3 (CentOS)
Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT
Content-Lenght: 6821
content-type: text/html
ENTITY BODY
(data... Update Succeed)

STATUS LINE, CODES OPTION:
200 OK
301 Moved Permanently
400 Bad Request:
404 Not found
5005 HTTP Versionn Not Supported
CLASSIFICAÇÃO:
Information response (100 - 199)
Sucessful response (200 - 299)
Redirection response (300 - 399)
Client error response (400 - 499)
Server error response (500 - 599)

HEADER LINES:
WebDav (Web Distributed Authoring and Versioning)
-------------------------------------------------------------------------

2.3 Pra que serve os Cookies e Cache?
Stateless (Não guarda informações)
Cliente/Server (Troca sempre entre cliente e serve)

1. Cookies: Se precisamos identificar o cliente
TRACK - Pequenos pedaços ou blocos de dados criados e utilizados pelo servidor para persistir dados no dispositivo do cliente (RFC 6265)

1.2 Onde estão? no HEADER FILE

2. Tipos:
Cookies de sessão: Apagados depois do acesso
Cookies de persistentes: Ficam por algum tempo (exemplo a senha salva)

3. Exemplos:
Manter logins ativos, Informação de Websites, Carrinho de compras.

4. LGPD é uma autorização para utilizar das suas informações

2. Caching: Sempre que fizer uma requisição, vai ser checado se já tem as informações no proxy server, caso se ele ja tem ou precisa fazer um update, ele inicia uma nova conexão com o HTTP server, caso não, ele só envia.

1. Vantagens: Redução do tempo de resposta, redução de tráfego.
------------------------------------------------------------------------

2.4 HTTP 2.0 - Atualizações do protocolo
HOL - Head of Line Blocking (bloqueio de requisição até receber a resposta), no 2.0, você pode enviar varias solicitações com streams distintas.

. Única conexão persistente
. Compressão de Header
. Server push (puxa tudo relacionado com aquela solicitação por metodo)
. HTTPS por padrão - TLS
. Negociação no handshake

-------------------------------------------------------------------------

2.5 Servidoes/Sistemas de Aplicação

1. Os servidoes mais utilizados:
1. APACHE: Servidor
2. NGINX: Servidor
3. XAMPP: UM pacote que utiliza o APACHE
-------------------------------------------------------------------------

3. HTTPS - O que muda no protocolo?
3.1 Conceitos básicos de segurança da informação
1. SLL (Protocolo) Conceitos báiscos: Criptografia por chave & Certificado digital

2. Criptografia por chave
1. Assiméticra:
Chave privada - Assinatura - Criptografia
Chave pública - Verificação de autenticidade
2. Simétrica:
Chave única privada - Conhecimento prévio da chave && Como transferir a chave?

Cifra de César: Substituição da letra pela k-ésima do alfabeto Rotatividade do alfabeto, Exemplo:
Bob, I love you. Alice -> Ere, I oryh brx. Dolfh

3. Certificado digital, feitos por entidades certificadoras

Padrões:
IETF - Recomendação ITUX.509
RFC 1422
-------------------------------------------------------------------------

3.2 Protocolo SSL - Secure Scoket Layer
Segurança para conexões TCP

1. Operações do SSL:
3 Fases:
Handshake
Key Derivation
Data Transfer

Verificação de autenticidade por certificados digitais Porta 443

2. LGPD / GDPR - General Data Protection Regulation - Legislação Europeia
-------------------------------------------------------------------------

4. Protocolo de comunicação WebSocket
4.1 Contextualização - PORTA: 80 e 443
Conexão bidirecional - Via API
-------------------------------------------------------------------------

4.2 Como funciona o WebSocket?
JSON ONLY
1. Origin-base security model
2. Endereçamento e protocolo
3. Camada -> enquadramento on top TCT
4. Encerramento do handshake
5. Campos SEC-...: No Edition
6. Independente do TCP
7. Interpretação do HTTP server
8. Porta 443
-------------------------------------------------------------------------

4.3 Como ocorre a comunicação na internet?
Proxy
HTTP server
DNS - Domain Name System
Socket
Load balancer = Distribuição de Carga, Multiplexação

TCP/IP Model:
Aplicação
Transporte
Rede
Enlace

#############################################################
Introdução ao ReactJS
#############################################################
1. Introdução
1.1 Conhece a tecnologia ReactJS
Uma biblioteca JavaScript para criar interfaces de usuários

Linguagem declarativa - Diferente da imperativa, ela se preocupa somente se a interface está sendo exibida, ela não para com nenhuma aplicação
----------------------------------------------------------------------

1.2 Aprenda a configurar o ReactJS:
React Create App
React Scripts
Task Runners and Bundler Sizers

1. Steps:
1. npm init
2. npm install --save react@16.8.6 react-dom@16.8.6 react-scripts@3.0.1
3. criar pasta public e um index.html
4. criar pasta src e index.js e styles.css

2. O que é JSX
const element = <h1>Hello, world</h1>
Nem HTML e nem uma string!
O browser não interpreta o JSX, para isso é necessário um transpilador para que a aplpicação possa entender o código. O mais utilizado é o Babel.
-------------------------------------------------------------------------

1.3 Rendezirando elementos
React 'pensa' em como a interface deve estar a cada momento ao invés de alterá-la com o  tempo, o que faz ter ganho de performance e evita uma série de erros.

1. Componentes e Props
Função e Classe;
Props;
Composição de Componentes;
Extração de Componentes

Nome de componentes, sempre em CamelCase:
Button.jsx
-------------------------------------------------------------------------

1.4 Ecossistemas do ReactJS
1. Estado e Ciclo de Vida
Inicialização
Montagem
Atualização
Desmontagem

Tools:
React Router;
Redux;
Material UI;
Ant-Design;
Storybook;
Gatsby;
Jest;
React i18n Next
------------------------------------------------------------------------

2. Integrando webpack ao desenvolvimento com ReactJS
2.1 O que é webpack?
É um module bundler (um empacotador de módulos para aplicações JS)
Gerar bundler que será utilizado no HTML, em ES5
-------------------------------------------------------------------------

2.2 Aprenda a configurar o webpack

Principais conceitos:
Entry - Utilizando grafo, o Webpack precisa de um ponto de entrada para buscar todos os módulos e dependências.
Output - É para determinar quais são os bundlers que o Webpack irá emitir.
Loaders - É para permitir que o Webpack gerencia arquivos não só Javaascript.
Plugins - Plugins podem ser utilizados para otimização de pacotes, minificação, injeção de scripts e muito mais.
Mode - Utilizados para abordagem de configuração zero. É possível configurar módulos como production, development ou none:
	Production: Trás otimizações internas
	Development: É executado com três plugins: UglifyJsPlugin, ModuleConcatenationPlugin e NoEmitOnErrorsPlugin.

1. Steps:
. npm i -D webpack webpack-cli
. "build":"webpack --mode production"
. npm i @babel/core babel-loader @babel/preset-env @babel/preset-react --save-dev
. Criar o arquivo webpack.config.js
. npm i react react-dom
. npm i -D babel-preset-react
. npm i -D webpack-dev-server
-------------------------------------------------------------------------

2.3 Instalação e configuração do ESLint
padronizar as escritas em códigos simultâneos

1. Steps:
. npm install --save-dev eslint babel-eslnt eslint-plugin-react eslint-watch
-------------------------------------------------------------------------

3. Conceito aplicados aos tipos de dados e condições da biblioteca
3.1 Renderização Condicional
Em React, você pode criar componentes distintos que encapsulam o comportamento que você precisa. Então, você pode renderizar apenas alguns dos elementos, dependendo do estado da sua aplicação
. Variáveis de elementos
. If inline com o Operador Lógico &&
. if-Else inline com Operador Condicional
. Evitando que um componente seja renderizado
-------------------------------------------------------------------------

3.2 Listas e Chaves
. Renderizando múltiplos componentes
. Componente de lista Básico
. Chaves
. Extraindo Componentes com Chaves
. Chave devem ser únicas apenas entre Elementos Irmão
-------------------------------------------------------------------------

3.3 Manipulando Eventos
Manipular eventos em elementos React é muito semelhante a manipular eventos em elementos do DOM. Existem algumas diferenças sintáticas:
1. Eventos em React são nomeados usando camelCase ao invés de letras minúsculas.
2. Com o JSX você passa uma função como manipulador de eventos ao invés de um texto
-------------------------------------------------------------------------

3.4 Dicas para pensar como ReactJS
1. Comece com o Mock - mock.js = um arquivo de camada de serviço
2. Separe a UI em uma Hierarquia de Componentes
3. Crie uma versão estática em React
4. Identifique a Representação mínima (mas, completa) do State da UI
5. Identifique onde o state deve ficar
6. Adicione o fluxo de dados inverso

#############################################################
Desenvolvimento de aplicações para internet com ReactJS
#############################################################
1. Trabalhando com estilos em elementos e componentes
1.2 Aprenda sobre estilização de componentes e elementos CSS

1. Maneiras de estilização:
. Inline
. Classes
. CSS -> Melhor opção: npm istall --save styled-components
-------------------------------------------------------------------------

1.3 Stateful vs Stateless
Stateful: usa estados; Possui gerenciamento de estados no compentens; Construídos usando classes em JS - Ciclo de vida: Initialization -> Mouting -> Updation -> Unmouting

stateless: não usa estados; Não possui gerenciamento de estados no componentes; Construídos usando funções em JS
-------------------------------------------------------------------------

1.4 Formulário: Mantêm um estado interno

1. Componente Controlado
Tanto select, input ou textarea aceitam um atributo value
Podemos mudar esse valor usando o atributo onChange

2. Componente não-controlado
A tag input é read-only

3. Bibliotecas:
Formit
Redux-forms
-------------------------------------------------------------------------

2. Introdução ao Redux e fluxos da arquitetura com ReactJS
2.1 O que é flux?
É um padrão de projeto para tráfego de dados de maneira unidirecional:
Action -> Dispatcher -> Store -> View
. Action - É como um telégrafo: ele formata a mensagem a ser enviada
. Dispatcher-  É como um telefonista; ele sabe todos os callbacks para diferentes stores.
. Store - É como um gerente super controlador; Ele guarda a informação e todas as alterações têm que ser feitas por ele mesmo, mais ninguém.
. View - É como um gerente intermediário (middleware) que recebe as notificações da store e passa os dados para as visões abaixo dela

1. Implementações:
Redux (mais popular)
Reflux
Mobx
Vuex (baseado em Redux e Elm)
NgRX/store (baseada em Redux e RXJS)

2. Bibliotecas baseadas em Flux:
Servem para comunicação entre componentes
Centralizam a informação
-------------------------------------------------------------------------

2.2 Conheça o Redux e como trabalhar com ele
React -> action -> store -> reducer -> store -> react

1. 3 Princípios:
. Single source of truth: Uma única store
. Sate é read-only
. Mudanças são feitas com pure functions

2. Actions
São como o do Flux
Diferença: Actions não enviam a action em si para o dispatcher
Retornam um objeto de action formatado

3. Store
Somete uma store, diferente do Flux que tem varios
A Store aqui cuida de toda a árvore de estados
Os reducers que cuidam de descobrir qual estado muda

4. Reducers
Em Redux não há dispatcher (simplifica e divide o trabalho da store)
A Store se conecta ao root reducer, que divide os estados em pequenos reducers para descobrir como ligar com esse estado.
Os estados aqui são imutáveis

5. Views: Em react, adiciona na camada de view 3 novos conceitos para conectar a view à store
1. Provider
2. connect()
3. selector 
-------------------------------------------------------------------------

3. Comunicação avançada entre aplicações
3.2 Rest HTTP com React
Fetch API:
Nativa do browser
Oferece uma alternativa ao XMLHttpRequest() e JQuery.ajax()
Suporte e Service Workers
Algumas diferenças:
	Não envia nem recebe cookies(precisa definir a opção cedentials)
	Não rejeita o status do erro HTTP

1. Axios
Lib de HTTP API
Cross-browser
Pode monitorar o progresso de um request
Melhor tratamento de erros
Melhor teste
Instalação: yarn add axios
-------------------------------------------------------------------------

3.3 Imutabilidade e Redux
Uma vez criada, uma coleção não pode ser alterada.
Novas coleções podem ser criadas a partir de uma coleção anterior e uma mutação (stter) como um conjunto
Novas coleções são criadas usando o máximo possível da estrutura original, reduzindo a cópia e aumentando a performance.

1. Immutable.js:
	Biblioteca que fornece coleções persistentes e imutáveis
	Permite detecção barata de alterações nos objetos

2. Imutabilidade é pré requisito no Redux
Redux e React-Redux utilizam comparações rasas
Manipulação de dados mais seguras
Time-travel debugging
-------------------------------------------------------------------------

3.4 Redux + Rest
- Suponha um sistema de notificações ou um sistema de logging
- Você precisa manter a sincronia, independente da tela onde estiver
- Uma maneira de resolver fácil seria armazenar os dados do serviço no Redux.

1. Redux Middlewares
- Provê uma camada entre o disparo de uma ação e o momento que ela atinge o reducer.
- Utilizadas para uma variedade funções, entre elas chamadas de APIs de serviço
Os mais usados: redux-thunk; redux-saga
-------------------------------------------------------------------------

4. Conceito aplicados a qualidade de código e automação de testes com React
4.2 TDD e BDD com Jest

1. O que é TDD (Test-Driven Development)
- Antecipar erros a nível de desenvolvimento
	Teste escrito antes da funcionalidade
- Não descarta a presença de um tester

. RED 1. Write a test that fails
. GREEN 2.Make the code work
. REFACTOR 3. Eliminate redundancy

. Teste unitário
. Teste End-to-End (E2E)

Ferramentas:
Jest
React-testing-library
Shallow
Enzyme
Chai
Mocha
Selenium
Puppeteer

Jest: Usa uma linguagem JavaScript: Jasmine (lingaguem de testes)

react-testing-library: teste de componente

2. O que é BDD (Behavior-Driven Development)
- Teste de especificação
	Une especificação, teste automatizado e premimssa de teste (documento de teste)

Sintaxe Gherkin:
Sintaxe de steps para definer cenários
Descreve cada funcionalidade por feature (caso de uso)

Blibiotecas mais utlizadas:
Jest-cucumber: yarn add --dev jest-cucumber
Chai
-------------------------------------------------------------------------

4.3 Debugging
Depuração é o processo de encontrar e reduzir defeitos em um software

1. Ferramentas:
- Chrome Devtools
- Redux Devtools
- React Devtools
-------------------------------------------------------------------------

4.4 Tratamento de erros
Resiliência de SW
Segurança

1. Tratamento em componentes
- Em JS usamos PropTypes
- Podemos usar linguagens tipadas como TypeScript, definindo interfaces.

#############################################################
Introdução aos React Hooks
#############################################################
O que são Hooks?
Hooks são uma nova adição do react, os quais facilitam o gerenciamento de estado e descoplamento dos componentes.

O que são Mocks?
São objetos que simulam o compartamento de objetos reais de forma controlada.

#############################################################
Trabalhando com States & Effects no ReactJS
#############################################################
2. O que são hooks?
Hookes(Ganchos) são chamadas que buscam seus componentes.
-------------------------------------------------------------------------

3. Creating your React project:
1. npx create-react-app aula-hooks[project name]
2. project organization:
	1. If you will not make tests, delete: src: AppTest.js; reportWebVitals.js; setupTest.js | and delete in index.js all references of reportWebVitals.js
	2. In src, create the folder: Components
	3. For each component, create a pasta into Components folder
	4. Create a folder App inside Components folder
	5. Move App.js; App.css and logo.svg to App folder
	6. Into App.js, remove all return in the App, create an H1 Hello world, delete the logo import and remove the logo file
3. Code!
-------------------------------------------------------------------------

5. Como criar um componentes utilizando estados
useState -> retorna um stateful (um estado com memoria para guardar o componente)
Exemplo:
quantity é o valor, upquantity é a função e o 1 dentro do useState é o valor inicial do valor.

import { useState } from 'react';

function Smartcounter() {
    const [quantity, upQuantity] = useState(1);

    return (
        <>
            <h1>{quantity}</h1>
            <button onClick={() => upQuantity(quantity + 1)}>Increase</button>
        </>
    )
}

export default Smartcounter;

-------------------------------------------------------------------------

6. Criando um componente prático
Atalho: rfc
-------------------------------------------------------------------------

7. Trabalhando com efeitos colaterais (useEffect)

Sintaxe:
useEffect(() => {

    }, [])

Exemplo:
document.get... = a função
[value] = o valor que vai ser alterado por conta do efeitos

useEffect(() => {
        document.getElementById('currency').innerHTML = 2.00 * value;
    }, [value])
-------------------------------------------------------------------------

#############################################################
Ciclo de Vida e suas fases
#############################################################
1. Aprofundando sobre o ciclo de vida do react
Fases:
Inicialização
Montagem
Atualização
Desmontagem
-------------------------------------------------------------------------

1.2 O que são Hooks e como ele pode otimizar o código
Hooks são uma nova adição ao React 16.8. Eles permitem que você use o state e outros recursos do React sem escrever uma classe.

Hooks:
useState
useEffect
useContext
useReducer
useCallback
useMemo
useRef
useImperativeHandle
useLayoutEffect
useDebugValue

Regras dos Hooks:
. Não use Hooks dentro de funções JavaScript comuns. E, vez disso você pode:
	Chamar Hooks em componentes React.
	Chamar Hooks dentro de Hooks customizados.
-------------------------------------------------------------------------

2. Técnicas com componenets e DOM
2.1 Por que trabalhar com fragments
1. Fragments: Um padrão comum no React é que um componenet pode retornar múltiplos elementos. Os Fragmentos permitem agrupar uma lista de filhos sem adicionar nós extras ao DOM
-------------------------------------------------------------------------

2.2 Error Boundaries: Resolve um erro da UI para não quebrar a aplicação
-------------------------------------------------------------------------

2.3 Render Props: O termo se refere a uma técnica de compartilha código entre componenetes Reaact passando uma prop cujo valor é uma função.
-------------------------------------------------------------------------

2.4 Typechecking: Na medida em que sua aplicação cresce, você pode capturar muitos bugs com chacagem de tipos. Em algumas aplicações, você pode usar extensões do JavaScript como o Flow ou TypeScript para checar os tipos de toda a sua aplicação. Porém, mesmo se você não usá-las, React possui algumas habilidades de checagem de tipos nativas.
-------------------------------------------------------------------------

2.5 Refs e DOM
Com Refs é possível acessar a árvore do DOM e/ou elementos React.

Quando utilizar:
> Manipulação de bibliotecas de terceiros
> Gerenciamento de inputs (foco), seleção de textos ou reprodução de mídias.
> Animações imperativas
-------------------------------------------------------------------------

3. Organizando o seu projeto
3.1 O que é um Dumb Components
Preocupa-se com a apresentação
Recebem valores via props.
Não possuem dependências com o restante da aplicação
Não especificam como os dados são carregador ou sofrem mutação
Recebem valores e callbacks exclusivamente via props.
Raramente possuem estados, quando precisam de estado é para controlar a interface e não dados do usuário
São escritos na maioria das vezes como componenes funcionais

Exemplos:
Button
Card
Sidebar
Footer
List
Menu
-------------------------------------------------------------------------

4. Smart Components
Preocupam-se como as coisas vão funcionar.
Podem conter Smart e Dumb components
Providenciam dados e padrões de apresentaçã oou outros containers
Na maioria dos casos possuem estado e podem chamar outros fluxos do sistema

Exemplos:
UserGallery
UserPage
FilterBook
FollowersSidebar
ListCards

IMPORTANTE: Utilizar o memo no export default memo(PhotosGallery) por exemplo, para só renderizar quando tiver modificação.

-------------------------------------------------------------------------

#########################################################################
Criando um front-end totalmente componetizado na prática com ReactJS
#########################################################################
1. Dividindo componentes:

const GithubApp = () => {
	
	return (
		<Layout>
			</Profile>
			</Repos>
		</Layout>
	)
}

2. Dentro dos componentes:

const Profile = () => {
	Get info for profile of user...
	return (
		<div>
			infos of profile
			of users
		</div>
	)
}

3. Remontando nossa inferface

