#############################################################
Instalando e Configuração seu Ambiente Node.js
#############################################################

1.1 O que é Node.JS
> Não é uma linguagem de programação
> Não é um framework Javascript
> Interagir com banco de dados
> Criar servidores e Web Apps
> Se comunicar com outras Apps
> Trabalhar com websockets e apps em tempo real
-------------------------------------------------------------------------

1.2 O que é NPM[Node Package Manager]
> Gerenciador de pacotes e dependências
-------------------------------------------------------------------------

4.2 Conhecendo o package.json
iniciando o projeto node: npm init

O que é package.json: trás todas as configurações do projeto, uma configuração padrão

#############################################################
Introdução ao Node.js com Javascript
#############################################################

1.3 Conceitos (relembrando):
Arrow function - função de expressão de sintaxe curta, sempre anônima, não pode ser nomeada.
ex:
var x = () => {};
variavel = função não nomeada => o que essa função vai realizar
-------------------------------------------------------------------------

1.4 conhecendo o Node.js
> Todo navegador possui um interpretador de javascript rodando por trás dos panos para fazer as coisas funcionarios, transformando o código em um bit code
Browser -> Engine -> Javascript rodando
> To run the javascript outside of the browser
-------------------------------------------------------------------------

1.5 Como funciona?
> As requisições no Node.js são assíncronas, agilizando assim a entrega. Trabalhando em Event-loop
> ele vai entregando o que ta pronto, mesmo se o que ta antes vim primeiro

1. Blocking, Non-blocking e Event-loop
> Blocking - síncrono, pois a entrega depende que todas as requisições estejam prontas
> Non-blocking - assíncrono, pois a entrega é feita mesmo sem todas as requisições estarem prontas. (trabalha com o Event-loop)
> Event-loop - execução das requisições de forma assíncrona.
-------------------------------------------------------------------------

1.6 O que é o NPM?
É uma ferramente de gerenciamento de pacodes do Node

Imagine um repositório gigantesco com inúmeras ferramentas de desenvovliment... esse é o NPM do NodeJS
-------------------------------------------------------------------------

1.7 criando o package.json e o server:
npm init - ininciando o pacote
* npm init -y (ele vai criar automaticamente dizendo yes para tudo)
-------------------------------------------------------------------------

#############################################################
Fundamentos de Node.js e Jest
#############################################################

1. Entendo o Node
1.2 Conhecendo o Node
Single-thread(javascript): cria uma pilha com as funções chamadas e executa uma por vez, mesmo que elas sejam concorrentes.
Multi-thread: Executa as ações paralelamente, independentes se esta são concorrentes
-------------------------------------------------------------------------

2.1 Criando servidor
1. yarn add nodemon -> instala a dependencia nodemon(um servidor dentro do node)
2. jogando tudo no package.json e querendo puxar toda a instalação depois: yarn install
3. yarn add express - é o que permite construir as rotas
-------------------------------------------------------------------------

2.2 Criando nossas Rotas em routes.js [src]
import { Router } from 'express'

const routes = Router()

// GET - ler os dados
// POST - criar dados
// PUT/PATCH - editar os dados
// DELETE - deletar os dados

export { routes }
-------------------------------------------------------------------------

3. Instaliando o typescript: 
3.1 Configurando:
Ele vai como -D (desenvolvedor), pois ele não será apresentado ao cliente
$ yarn add -D typescript 
$ npx tsc --init - para iniciar o arquivo de inicialização do typescript
$ yarn add -D ts-node-dev - para rodar o typescript direto sem precisa rodar o seu index.
$ yarn add -D @types/express - adicionar o express no json
-------------------------------------------------------------------------

4. Conhecendo o Jest
4.1 Configurando o Jest
Jest é um framework, desenvovlido pelo Facebook, que permite escrever testes automatizados em aplicações JS ou TS.

$ yarn add -D jest
$ yarn add -D @types/jest
$ yarn add -D ts-jes
$ npx jest --init

Descomentar testMatch
-------------------------------------------------------------------------

5. Padrão AAA
5.1 Entendendo o padrão AAA
> Arrange - Montagem do cenário de testes
> Act - Ação que será testada
> Assert - Validação dos resultados

Vamos que ir no jest.config.ts, configurar o preset para: 'ts-jest',
-------------------------------------------------------------------------

6. Mocks e testes unitários
6.1 Criando mocks e testes unitários
Mocks: São objetos, que substituem implementações reais em um cenário de testes unitário. Isso permite validar apenas os comportamentos afetados pelo novo componente.

Teste unitários: São os testes mais simples de serem escrtios na aplicação. Como o nome sugere a ideia é testar apenas o componente (unidade) ao qual ele faz referência

base.twig
1. Testes unitários
Base -> Testes unitário -menor custo
Medio da piramide -> teste de integração -custo médio
top da piramide -> testes e2e -custo alto

1.2 Testes unitários
São os testes mais simples de serem escritos na aplicação. Como o nome sugre a ideia é testar apenas o componente (unidade) ao qual ele faz referência 

Mocks: São objetos, que substituem implementações reais em um cenário de testes unitários. Isso permite validar apenas os comportamentos afetados pelo novo componente.
-------------------------------------------------------------------------

2. Test-driven development
2.1 TDD
RED - Escrever um teste que falhe
GREEN - Fazer o código funcionar
REFACTOR - Otimizar o código
------------------------------------------------------------------------

3. Tests integrados
São testes mais complexos, onde o objetivo é testar o funcionamento completa da aplicação simultâneamente.
-------------------------------------------------------------------------

4. Testes e2e
São testes que passam por toda a aplicação. Testamos a conexão com a API, cadastro no banco de dados e todas as respostas esperadas
-------------------------------------------------------------------------

#############################################################
Aplicando o Estilo Arquitetural REST com Node.js
#############################################################

projeto commitado no github como user-authentication

#############################################################
Node.js com Bancos de Dados Relacionais (SQL)
#############################################################

 projeto commitado no github como user-authentication

#############################################################
Microsserviços e Integrações com Node.js
#############################################################

projeto commitado no github como user-authentication

#############################################################
Criando uma API REST com Node.js e TypeORM
#############################################################

1. Entendendo o TypeORM
1.2 Conhecendo o TypeORM e entendendo seu papel
ORM (Object Relational Mapper) é uma técnica de mapeamento de objeto relacional que permite fazer uma relação d objeto com os dados que os mesmos representam.

TypeORM (ferramenta):
> Um dos ORMs mais populares
> Documentação simples
> Fácil implementação
> Compatível com varios bancos de dados (MySQL), MongoDB, Postgress, SQLite, etc)
-------------------------------------------------------------------------

2. Criando a API
2.1 Inicializando a API
$ npm init
$ npm i typescript -D
$ npx tsc --init
$ npm i ts-node-dev -D
> fazer algumas atualizações no tsconfig.json:
    > "target": "es6"
    > "strict": false
> fazer algumas atualizações no package.json
    > no script -> "dev":"ts-node-dev index.ts",
-------------------------------------------------------------------------

2.2 Construindo as primeiras rotas
$ npm i express
$ npm i @types/express -D

CRUD:
// criar um usuario Create = C
// selecionar um usuario Read = R
// editar um usuario Update = U
// deletar um usuario Delete = D
-------------------------------------------------------------------------

2.5 Status code e enviando requisições
Nos controllers deixar as validações
Nos Services a conexão com o banco de dados
-------------------------------------------------------------------------

3. Configurando o TypeORM
3.1 Configurando o TypeORM
$ npm i typeorm@0.2.38 reflect-metadata
$ npm i sqlite3
> criar o arquivo: ormconfig.json
> no package.json colocar um novo script: "typeorm": "ts-node-dev ./node_modules/typeorm/cli.js"
-------------------------------------------------------------------------

3.2 Migrations e Entitities
Criando a primeira magration:
$ npx typeorm migration:create -n CriarUsuarios
> Editando a migration criada
Criando o banco de dados sqlite
$ npm run typeorm migration:run
-------------------------------------------------------------------------

4. Tests automatizados
4.1 Configurando o Jest
$ npm i jest @types/jest ts-jest -D
$ npx jest --init
> configurar jest.config.ts
    > bail: false,
    > clearMocks: false,
    > preset: "ts-jest",
    > testMatch: [
    "**/__tests__/**/*.ts)",
    "**/test.ts"
  ],
    >
-------------------------------------------------------------------------

5. TDD
5.1 Conhecendo o TDD
RED - escrever um teste que vai falhar
GREEN - fazemos o teste passar
REFACTOR - eliminar redundancia
-------------------------------------------------------------------------

#############################################################
Integrando um Backend em Node.js com um Frontend em React para um E-commence
#############################################################